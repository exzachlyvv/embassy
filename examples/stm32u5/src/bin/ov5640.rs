// https://github.com/hargoniX/OV5640/blob/7b42685644fefb56c24b0ecd503200624736cb55/src/ov5640.rs
// use embedded_hal::i2c::I2c;
use embassy_stm32::{
    i2c::{Error as I2cError, I2c},
    peripherals,
};

use core::convert::TryInto;

const OV5640_ADDR: u8 = 0x3c;
const OV5640_ID: u8 = 0x78;

const OV5640_REG_FORMAT_00: u16 = 0x4300;
const OV5640_REG_ID: u16 = 0x3100;
const OV5640_REG_ISP_FORMAT_MUX_CTRL: u16 = 0x501f;

const OV5640_FMT_MUX_RGB: u8 = 1;
const OV5640_FMT_MUX_RAW_DPC: u8 = 3;
const OV5640_FMT_MUX_YUV422: u8 = 0;
// These are init values taken over from the manufacturers example
// They init the module to: 24M Mlck input and 24M Plck output;15fps YUV mode
const OV5640_INITIAL_SETTINGS: [(u16, u8); 253] = [
    (0x3103, 0x11),
    (0x3008, 0x82),
    (0x3008, 0x42),
    (0x3103, 0x03),
    (0x3017, 0xff),
    (0x3018, 0xff),
    (0x3034, 0x1a),
    (0x3035, 0x11),
    (0x3036, 0x46),
    (0x3037, 0x13),
    (0x3108, 0x01),
    (0x3630, 0x36),
    (0x3631, 0x0e),
    (0x3632, 0xe2),
    (0x3633, 0x12),
    (0x3621, 0xe0),
    (0x3704, 0xa0),
    (0x3703, 0x5a),
    (0x3715, 0x78),
    (0x3717, 0x01),
    (0x370b, 0x60),
    (0x3705, 0x1a),
    (0x3905, 0x02),
    (0x3906, 0x10),
    (0x3901, 0x0a),
    (0x3731, 0x12),
    (0x3600, 0x08),
    (0x3601, 0x33),
    (0x302d, 0x60),
    (0x3620, 0x52),
    (0x371b, 0x20),
    (0x471c, 0x50),
    (0x3a13, 0x43),
    (0x3a18, 0x00),
    (0x3a19, 0xf8),
    (0x3635, 0x13),
    (0x3636, 0x03),
    (0x3634, 0x40),
    (0x3622, 0x01),
    (0x3c01, 0x34),
    (0x3c04, 0x28),
    (0x3c05, 0x98),
    (0x3c06, 0x00),
    (0x3c07, 0x08),
    (0x3c08, 0x00),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3820, 0x41),
    (0x3821, 0x07),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x00),
    (0x3801, 0x00),
    (0x3802, 0x00),
    (0x3803, 0x04),
    (0x3804, 0x0a),
    (0x3805, 0x3f),
    (0x3806, 0x07),
    (0x3807, 0x9b),
    (0x3808, 0x02),
    (0x3809, 0x80),
    (0x380a, 0x01),
    (0x380b, 0xe0),
    (0x380c, 0x07),
    (0x380d, 0x68),
    (0x380e, 0x03),
    (0x380f, 0xd8),
    (0x3810, 0x00),
    (0x3811, 0x10),
    (0x3812, 0x00),
    (0x3813, 0x06),
    (0x3618, 0x00),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x03),
    (0x3a02, 0x03),
    (0x3a03, 0xd8),
    (0x3a08, 0x01),
    (0x3a09, 0x27),
    (0x3a0a, 0x00),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x03),
    (0x3a0d, 0x04),
    (0x3a14, 0x03),
    (0x3a15, 0xd8),
    (0x4001, 0x02),
    (0x4004, 0x02),
    (0x3000, 0x00),
    (0x3002, 0x1c),
    (0x3004, 0xff),
    (0x3006, 0xc3),
    (0x300e, 0x58),
    (0x302e, 0x00),
    (0x4300, 0x30),
    (0x501f, 0x00),
    (0x4713, 0x03),
    (0x4407, 0x04),
    (0x440e, 0x00),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x02),
    (0x5000, 0xa7),
    (0x5001, 0xa3),
    (0x5180, 0xff),
    (0x5181, 0xf2),
    (0x5182, 0x00),
    (0x5183, 0x14),
    (0x5184, 0x25),
    (0x5185, 0x24),
    (0x5186, 0x09),
    (0x5187, 0x09),
    (0x5188, 0x09),
    (0x5189, 0x75),
    (0x518a, 0x54),
    (0x518b, 0xe0),
    (0x518c, 0xb2),
    (0x518d, 0x42),
    (0x518e, 0x3d),
    (0x518f, 0x56),
    (0x5190, 0x46),
    (0x5191, 0xf8),
    (0x5192, 0x04),
    (0x5193, 0x70),
    (0x5194, 0xf0),
    (0x5195, 0xf0),
    (0x5196, 0x03),
    (0x5197, 0x01),
    (0x5198, 0x04),
    (0x5199, 0x12),
    (0x519a, 0x04),
    (0x519b, 0x00),
    (0x519c, 0x06),
    (0x519d, 0x82),
    (0x519e, 0x38),
    (0x5381, 0x1e),
    (0x5382, 0x5b),
    (0x5383, 0x08),
    (0x5384, 0x0a),
    (0x5385, 0x7e),
    (0x5386, 0x88),
    (0x5387, 0x7c),
    (0x5388, 0x6c),
    (0x5389, 0x10),
    (0x538a, 0x01),
    (0x538b, 0x98),
    (0x5300, 0x08),
    (0x5301, 0x30),
    (0x5302, 0x10),
    (0x5303, 0x00),
    (0x5304, 0x08),
    (0x5305, 0x30),
    (0x5306, 0x08),
    (0x5307, 0x16),
    (0x5309, 0x08),
    (0x530a, 0x30),
    (0x530b, 0x04),
    (0x530c, 0x06),
    (0x5480, 0x01),
    (0x5481, 0x08),
    (0x5482, 0x14),
    (0x5483, 0x28),
    (0x5484, 0x51),
    (0x5485, 0x65),
    (0x5486, 0x71),
    (0x5487, 0x7d),
    (0x5488, 0x87),
    (0x5489, 0x91),
    (0x548a, 0x9a),
    (0x548b, 0xaa),
    (0x548c, 0xb8),
    (0x548d, 0xcd),
    (0x548e, 0xdd),
    (0x548f, 0xea),
    (0x5490, 0x1d),
    (0x5580, 0x02),
    (0x5583, 0x40),
    (0x5584, 0x10),
    (0x5589, 0x10),
    (0x558a, 0x00),
    (0x558b, 0xf8),
    (0x5800, 0x23),
    (0x5801, 0x14),
    (0x5802, 0x0f),
    (0x5803, 0x0f),
    (0x5804, 0x12),
    (0x5805, 0x26),
    (0x5806, 0x0c),
    (0x5807, 0x08),
    (0x5808, 0x05),
    (0x5809, 0x05),
    (0x580a, 0x08),
    (0x580b, 0x0d),
    (0x580c, 0x08),
    (0x580d, 0x03),
    (0x580e, 0x00),
    (0x580f, 0x00),
    (0x5810, 0x03),
    (0x5811, 0x09),
    (0x5812, 0x07),
    (0x5813, 0x03),
    (0x5814, 0x00),
    (0x5815, 0x01),
    (0x5816, 0x03),
    (0x5817, 0x08),
    (0x5818, 0x0d),
    (0x5819, 0x08),
    (0x581a, 0x05),
    (0x581b, 0x06),
    (0x581c, 0x08),
    (0x581d, 0x0e),
    (0x581e, 0x29),
    (0x581f, 0x17),
    (0x5820, 0x11),
    (0x5821, 0x11),
    (0x5822, 0x15),
    (0x5823, 0x28),
    (0x5824, 0x46),
    (0x5825, 0x26),
    (0x5826, 0x08),
    (0x5827, 0x26),
    (0x5828, 0x64),
    (0x5829, 0x26),
    (0x582a, 0x24),
    (0x582b, 0x22),
    (0x582c, 0x24),
    (0x582d, 0x24),
    (0x582e, 0x06),
    (0x582f, 0x22),
    (0x5830, 0x40),
    (0x5831, 0x42),
    (0x5832, 0x24),
    (0x5833, 0x26),
    (0x5834, 0x24),
    (0x5835, 0x22),
    (0x5836, 0x22),
    (0x5837, 0x26),
    (0x5838, 0x44),
    (0x5839, 0x24),
    (0x583a, 0x26),
    (0x583b, 0x28),
    (0x583c, 0x42),
    (0x583d, 0xce),
    (0x5025, 0x00),
    (0x3a0f, 0x30),
    (0x3a10, 0x28),
    (0x3a1b, 0x30),
    (0x3a1e, 0x26),
    (0x3a11, 0x60),
    (0x3a1f, 0x14),
    (0x3008, 0x02),
    (0x3035, 0x21),
];

// These are value for different resolutions taken over from the linux kernel
const QCIF_176_144: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x4),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9b),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x6),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0xa3),
];
const QVGA_320_240: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x4),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9b),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x6),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0xa3),
];
const VGA_640_480: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x4),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9b),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x6),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0xa3),
];
const NTSC_720_480: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x4),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9b),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x3c),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0xa3),
];
const PAL_720_576: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x4),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9b),
    (0x3810, 0x0),
    (0x3811, 0x38),
    (0x3812, 0x0),
    (0x3813, 0x6),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0xa3),
];
const XGA_1024_768: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x4),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9b),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x6),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0xa3),
];
const P720_1280_720: [(u16, u8); 40] = [
    (0x3c07, 0x7),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x31),
    (0x3815, 0x31),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0xfa),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x6),
    (0x3807, 0xa9),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x4),
    (0x3618, 0x0),
    (0x3612, 0x29),
    (0x3708, 0x64),
    (0x3709, 0x52),
    (0x370c, 0x3),
    (0x3a02, 0x2),
    (0x3a03, 0xe4),
    (0x3a08, 0x1),
    (0x3a09, 0xbc),
    (0x3a0a, 0x1),
    (0x3a0b, 0x72),
    (0x3a0e, 0x1),
    (0x3a0d, 0x2),
    (0x3a14, 0x2),
    (0x3a15, 0xe4),
    (0x4001, 0x2),
    (0x4004, 0x2),
    (0x4407, 0x4),
    (0x460b, 0x37),
    (0x460c, 0x20),
    (0x3824, 0x4),
    (0x5001, 0x83),
];
const P1080_1920_1080: [(u16, u8); 72] = [
    (0x3008, 0x42),
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x11),
    (0x3815, 0x11),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x0),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9f),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x4),
    (0x3618, 0x4),
    (0x3612, 0x29),
    (0x3708, 0x21),
    (0x3709, 0x12),
    (0x370c, 0x0),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x6),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0x83),
    (0x3c07, 0x7),
    (0x3c08, 0x0),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3800, 0x1),
    (0x3801, 0x50),
    (0x3802, 0x1),
    (0x3803, 0xb2),
    (0x3804, 0x8),
    (0x3805, 0xef),
    (0x3806, 0x5),
    (0x3807, 0xf1),
    (0x3612, 0x2b),
    (0x3708, 0x64),
    (0x3a02, 0x4),
    (0x3a03, 0x60),
    (0x3a08, 0x1),
    (0x3a09, 0x50),
    (0x3a0a, 0x1),
    (0x3a0b, 0x18),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x4),
    (0x3a15, 0x60),
    (0x4407, 0x4),
    (0x460b, 0x37),
    (0x460c, 0x20),
    (0x3824, 0x4),
    (0x4005, 0x1a),
    (0x3008, 0x2),
];
const QSXGA_2592_1944: [(u16, u8); 40] = [
    (0x3c07, 0x8),
    (0x3c09, 0x1c),
    (0x3c0a, 0x9c),
    (0x3c0b, 0x40),
    (0x3814, 0x11),
    (0x3815, 0x11),
    (0x3800, 0x0),
    (0x3801, 0x0),
    (0x3802, 0x0),
    (0x3803, 0x0),
    (0x3804, 0xa),
    (0x3805, 0x3f),
    (0x3806, 0x7),
    (0x3807, 0x9f),
    (0x3810, 0x0),
    (0x3811, 0x10),
    (0x3812, 0x0),
    (0x3813, 0x4),
    (0x3618, 0x4),
    (0x3612, 0x29),
    (0x3708, 0x21),
    (0x3709, 0x12),
    (0x370c, 0x0),
    (0x3a02, 0x3),
    (0x3a03, 0xd8),
    (0x3a08, 0x1),
    (0x3a09, 0x27),
    (0x3a0a, 0x0),
    (0x3a0b, 0xf6),
    (0x3a0e, 0x3),
    (0x3a0d, 0x4),
    (0x3a14, 0x3),
    (0x3a15, 0xd8),
    (0x4001, 0x2),
    (0x4004, 0x6),
    (0x4407, 0x4),
    (0x460b, 0x35),
    (0x460c, 0x22),
    (0x3824, 0x2),
    (0x5001, 0x83),
];

#[derive(Debug)]
pub enum SccbError {
    I2c(I2cError),
    InvalidId(u8),
    Gpio,
}

pub type I2cChannel = peripherals::I2C1;
pub type TXDMA = peripherals::GPDMA1_CH1;
pub type RXDMA = peripherals::GPDMA1_CH2;

pub struct Ov5640 {
    i2c: I2c<'static, I2cChannel, TXDMA, RXDMA>,
}

pub enum Resolution {
    Qcifz176_144,
    Qvga320_240,
    Vga640_480,
    Ntsc720_480,
    Pal720_576,
    Xga1024_768,
    P720_1280_720,
    P1080_1920_1080,
    Qsxga2592_1944,
}

pub enum Format {
    Raw(RawOrder),
    Rgb565(Rgb565Order),
    Yuv422(Yuv422Order),
}

pub enum RawOrder {
    SBGGR8, // BGBG... / GRGR...0x0,
    SGBRG8, // GBGB... / RGRG...0x1,
    SGRBG8, // GRGR... / BGBG...0x2,
    SRGGB8, // RGRG... / GBGB...0x3
}

pub enum Rgb565Order {
    Bggr,
    Rggb,
    Grrb,
    Brrg,
    Gbbr,
    Rbbg,
}

pub enum Yuv422Order {
    Yuyv,
    Yvyu,
    Uyvy,
    Vyuy,
}

impl Format {
    fn format_bits(&self) -> u8 {
        match self {
            Format::Raw(order) => order.to_hex(),
            Format::Rgb565(order) => 0x60 | order.to_hex(),
            Format::Yuv422(order) => 0x30 | order.to_hex(),
        }
    }

    fn mux_bits(&self) -> u8 {
        match self {
            Format::Raw(_) => OV5640_FMT_MUX_RAW_DPC,
            Format::Rgb565(_) => OV5640_FMT_MUX_RGB,
            Format::Yuv422(_) => OV5640_FMT_MUX_YUV422,
        }
    }
}

impl RawOrder {
    fn to_hex(&self) -> u8 {
        match self {
            RawOrder::SBGGR8 => 0,
            RawOrder::SGBRG8 => 1,
            RawOrder::SGRBG8 => 2,
            RawOrder::SRGGB8 => 3,
        }
    }
}

impl Rgb565Order {
    fn to_hex(&self) -> u8 {
        match self {
            Rgb565Order::Bggr => 0,
            Rgb565Order::Rggb => 1,
            Rgb565Order::Grrb => 2,
            Rgb565Order::Brrg => 3,
            Rgb565Order::Gbbr => 4,
            Rgb565Order::Rbbg => 5,
        }
    }
}

impl Yuv422Order {
    fn to_hex(&self) -> u8 {
        match self {
            Yuv422Order::Yuyv => 0,
            Yuv422Order::Yvyu => 1,
            Yuv422Order::Uyvy => 2,
            Yuv422Order::Vyuy => 3,
        }
    }
}

impl Ov5640 {
    pub fn new(i2c: I2c<'static, I2cChannel, TXDMA, RXDMA>) -> Self {
        Ov5640 { i2c }
    }

    pub fn init(&mut self, format: Format, resolution: Resolution) -> Result<(), SccbError> {
        let slave_id = self.read_reg(OV5640_REG_ID)?;
        if slave_id != OV5640_ID {
            return Err(SccbError::InvalidId(slave_id));
        }

        for register in OV5640_INITIAL_SETTINGS.iter() {
            self.write_reg(register.0, register.1)?;
        }

        for register in match resolution {
            Resolution::Qcifz176_144 => QCIF_176_144.iter(),
            Resolution::Qvga320_240 => QVGA_320_240.iter(),
            Resolution::Vga640_480 => VGA_640_480.iter(),
            Resolution::Ntsc720_480 => NTSC_720_480.iter(),
            Resolution::Pal720_576 => PAL_720_576.iter(),
            Resolution::Xga1024_768 => XGA_1024_768.iter(),
            Resolution::P720_1280_720 => P720_1280_720.iter(),
            Resolution::P1080_1920_1080 => P1080_1920_1080.iter(),
            Resolution::Qsxga2592_1944 => QSXGA_2592_1944.iter(),
        } {
            self.write_reg(register.0, register.1)?;
        }

        // configure the output format
        self.write_reg(OV5640_REG_FORMAT_00, format.format_bits())?;
        self.write_reg(OV5640_REG_ISP_FORMAT_MUX_CTRL, format.mux_bits())?;

        Ok(())
    }

    // pub fn set_rst(&mut self, on: bool) -> Result<(), SccbError> {
    //     if on {
    //         self.rst.set_high().map_err(|_| SccbError::Gpio)
    //     } else {
    //         self.rst.set_low().map_err(|_| SccbError::Gpio)
    //     }
    // }

    // pub fn set_pwdn(&mut self, on: bool) -> Result<(), SccbError> {
    //     if on {
    //         self.pwdn.set_high().map_err(|_| SccbError::Gpio)
    //     } else {
    //         self.pwdn.set_low().map_err(|_| SccbError::Gpio)
    //     }
    // }

    fn write_reg(&mut self, reg: u16, val: u8) -> Result<(), SccbError> {
        self.i2c
            .blocking_write(
                OV5640_ADDR,
                &[(reg >> 8).try_into().unwrap(), (reg & 0xff).try_into().unwrap(), val],
            )
            .map_err(|e| SccbError::I2c(e))
    }

    fn read_reg(&mut self, reg: u16) -> Result<u8, SccbError> {
        self.i2c
            .blocking_write(
                OV5640_ADDR,
                &[(reg >> 8).try_into().unwrap(), (reg & 0xff).try_into().unwrap()],
            )
            .map_err(|e| SccbError::I2c(e))?;

        let mut buf: [u8; 1] = [0];

        self.i2c
            .blocking_read(OV5640_ADDR, &mut buf)
            .map_err(|e| SccbError::I2c(e))?;

        Ok(buf[0])
    }

    pub fn free(self) -> I2c<'static, I2cChannel, TXDMA, RXDMA> {
        self.i2c
    }
}
